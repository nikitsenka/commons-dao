/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JDefectFieldAllowedValueRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JDefectFieldAllowedValue extends TableImpl<JDefectFieldAllowedValueRecord> {

    private static final long serialVersionUID = -487789452;

    /**
     * The reference instance of <code>public.defect_field_allowed_value</code>
     */
    public static final JDefectFieldAllowedValue DEFECT_FIELD_ALLOWED_VALUE = new JDefectFieldAllowedValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JDefectFieldAllowedValueRecord> getRecordType() {
        return JDefectFieldAllowedValueRecord.class;
    }

    /**
     * The column <code>public.defect_field_allowed_value.id</code>.
     */
    public final TableField<JDefectFieldAllowedValueRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('defect_field_allowed_value_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.defect_field_allowed_value.defect_form_field</code>.
     */
    public final TableField<JDefectFieldAllowedValueRecord, Long> DEFECT_FORM_FIELD = createField("defect_form_field", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.defect_field_allowed_value.value_id</code>.
     */
    public final TableField<JDefectFieldAllowedValueRecord, String> VALUE_ID = createField("value_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.defect_field_allowed_value.value_name</code>.
     */
    public final TableField<JDefectFieldAllowedValueRecord, String> VALUE_NAME = createField("value_name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.defect_field_allowed_value</code> table reference
     */
    public JDefectFieldAllowedValue() {
        this(DSL.name("defect_field_allowed_value"), null);
    }

    /**
     * Create an aliased <code>public.defect_field_allowed_value</code> table reference
     */
    public JDefectFieldAllowedValue(String alias) {
        this(DSL.name(alias), DEFECT_FIELD_ALLOWED_VALUE);
    }

    /**
     * Create an aliased <code>public.defect_field_allowed_value</code> table reference
     */
    public JDefectFieldAllowedValue(Name alias) {
        this(alias, DEFECT_FIELD_ALLOWED_VALUE);
    }

    private JDefectFieldAllowedValue(Name alias, Table<JDefectFieldAllowedValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private JDefectFieldAllowedValue(Name alias, Table<JDefectFieldAllowedValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JDefectFieldAllowedValue(Table<O> child, ForeignKey<O, JDefectFieldAllowedValueRecord> key) {
        super(child, key, DEFECT_FIELD_ALLOWED_VALUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEFECT_FIELD_ALLOWED_VALUE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JDefectFieldAllowedValueRecord, Long> getIdentity() {
        return Keys.IDENTITY_DEFECT_FIELD_ALLOWED_VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JDefectFieldAllowedValueRecord> getPrimaryKey() {
        return Keys.DEFECT_FIELD_ALLOWED_VALUE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JDefectFieldAllowedValueRecord>> getKeys() {
        return Arrays.<UniqueKey<JDefectFieldAllowedValueRecord>>asList(Keys.DEFECT_FIELD_ALLOWED_VALUE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JDefectFieldAllowedValueRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JDefectFieldAllowedValueRecord, ?>>asList(Keys.DEFECT_FIELD_ALLOWED_VALUE__DEFECT_FIELD_ALLOWED_VALUE_DEFECT_FORM_FIELD_FKEY);
    }

    public JDefectFormField defectFormField() {
        return new JDefectFormField(this, Keys.DEFECT_FIELD_ALLOWED_VALUE__DEFECT_FIELD_ALLOWED_VALUE_DEFECT_FORM_FIELD_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JDefectFieldAllowedValue as(String alias) {
        return new JDefectFieldAllowedValue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JDefectFieldAllowedValue as(Name alias) {
        return new JDefectFieldAllowedValue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JDefectFieldAllowedValue rename(String name) {
        return new JDefectFieldAllowedValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JDefectFieldAllowedValue rename(Name name) {
        return new JDefectFieldAllowedValue(name, null);
    }
}
