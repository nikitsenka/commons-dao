/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.tables.records.JCrosstab4Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCrosstab4 extends TableImpl<JCrosstab4Record> {

    private static final long serialVersionUID = 837882916;

    /**
     * The reference instance of <code>public.crosstab4</code>
     */
    public static final JCrosstab4 CROSSTAB4 = new JCrosstab4();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JCrosstab4Record> getRecordType() {
        return JCrosstab4Record.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<JCrosstab4Record, Object> CROSSTAB4_ = createField("crosstab4", org.jooq.impl.DefaultDataType.getDefaultDataType("\"tablefunc_crosstab_4\""), this, "");

    /**
     * Create a <code>public.crosstab4</code> table reference
     */
    public JCrosstab4() {
        this(DSL.name("crosstab4"), null);
    }

    /**
     * Create an aliased <code>public.crosstab4</code> table reference
     */
    public JCrosstab4(String alias) {
        this(DSL.name(alias), CROSSTAB4);
    }

    /**
     * Create an aliased <code>public.crosstab4</code> table reference
     */
    public JCrosstab4(Name alias) {
        this(alias, CROSSTAB4);
    }

    private JCrosstab4(Name alias, Table<JCrosstab4Record> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private JCrosstab4(Name alias, Table<JCrosstab4Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JCrosstab4(Table<O> child, ForeignKey<O, JCrosstab4Record> key) {
        super(child, key, CROSSTAB4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JCrosstab4 as(String alias) {
        return new JCrosstab4(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JCrosstab4 as(Name alias) {
        return new JCrosstab4(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public JCrosstab4 rename(String name) {
        return new JCrosstab4(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public JCrosstab4 rename(Name name) {
        return new JCrosstab4(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public JCrosstab4 call(String __1) {
        return new JCrosstab4(DSL.name(getName()), null, new Field[] { 
              DSL.val(__1, org.jooq.impl.SQLDataType.CLOB)
        });
    }

    /**
     * Call this table-valued function
     */
    public JCrosstab4 call(Field<String> __1) {
        return new JCrosstab4(DSL.name(getName()), null, new Field[] { 
              __1
        });
    }
}
